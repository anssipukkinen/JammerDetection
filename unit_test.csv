import unittest
from io import StringIO
import pandas as pd
from datetime import datetime
from your_module import parse_agc_file, parse_nmea_file, merge_agc_snr

class TestAGCNMEAParsing(unittest.TestCase):

    def setUp(self):
        # Mock AGC data
        self.agc_data = StringIO(
            "Agc,1725970909620,4105000000,,,-1410006123515000467,0.0,200000422.815,,,9,39.776634216308594,1575420000,1\n"
            "Agc,1725972278999,1373505000000,,,-1410006123515000467,0.0,200000422.815,,,9,27.057228088378906,1176450000,1\n"
        )

        # Mock NMEA data
        self.nmea_data = StringIO(
            "$GPGSV,4,1,13,09,69,147,45,11,43,264,40,20,38,289,40,07,31,178,33*7D,1725970909620\n"
            "$GPGSV,4,2,13,08,30,045,30,10,15,123,20,12,10,200,15,14,05,300,10*7E,1725972278999\n"
        )

    def test_parse_agc_file(self):
        # Parse the mock AGC data
        agc_df = parse_agc_file(self.agc_data)
        # Check if the DataFrame has the expected number of rows
        self.assertEqual(len(agc_df), 2)
        # Check if the first AGC value is parsed correctly
        self.assertAlmostEqual(agc_df.iloc[0]['agc_db'], 39.776634216308594)
        # Check if the timestamp is parsed correctly
        expected_timestamp = datetime.utcfromtimestamp(1725970909620 / 1000.0)
        self.assertEqual(agc_df.iloc[0]['timestamp'], expected_timestamp)

    def test_parse_nmea_file(self):
        # Parse the mock NMEA data
        nmea_df = parse_nmea_file(self.nmea_data)
        # Check if the DataFrame has the expected number of rows
        self.assertEqual(len(nmea_df), 6)
        # Check if the first SNR value is parsed correctly
        self.assertEqual(nmea_df.iloc[0]['snr'], 45)
        # Check if the timestamp is parsed correctly
        expected_timestamp = datetime.utcfromtimestamp(1725970909620 / 1000.0)
        self.assertEqual(nmea_df.iloc[0]['timestamp'], expected_timestamp)

    def test_merge_agc_snr(self):
        # Parse the mock data
        agc_df = parse_agc_file(self.agc_data)
        nmea_df = parse_nmea_file(self.nmea_data)
        # Merge the data
        merged_df = merge_agc_snr(agc_df, nmea_df)
        # Check if the merged DataFrame has the expected number of rows
        self.assertEqual(len(merged_df), 2)
        # Check if the merged DataFrame contains the expected columns
        expected_columns = {'timestamp', 'agc_db', 'constellation', 'snr'}
        self.assertTrue(expected_columns.issubset(merged_df.columns))
        # Check if the first merged row has the correct average SNR
        self.assertAlmostEqual(merged_df.iloc[0]['snr'], 39.5)  # Average of 45 and 34

if __name__ == '__main__':
    unittest.main()
